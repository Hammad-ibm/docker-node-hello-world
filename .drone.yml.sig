eyJhbGciOiJIUzI1NiJ9.cGlwZWxpbmU6CgogIG15LWJ1aWxkOgogICAgcHJpdmlsZWdlZDogdHJ1ZQogICAgaW1hZ2U6IGRvY2tlcjoxLjExCiAgICBlbnZpcm9ubWVudDoKICAgICAgLSBET0NLRVJfSE9TVD10Y3A6Ly8xMjcuMC4wLjE6MjM3NQogICAgY29tbWFuZHM6CiAgICAgIC0gZG9ja2VyIGJ1aWxkIC10IG5vZGUtaGVsbG8td29ybGQgLgogICAgd2hlbjoKICAgICAgYnJhbmNoOiBtYXN0ZXIKICAgICAgZXZlbnQ6IHB1c2gKCiAgaW1hZ2VfdG9fcXVheToKICAgIGltYWdlOiBkb2NrZXI6MS4xMQogICAgZW52aXJvbm1lbnQ6CiAgICAgIC0gRE9DS0VSX0hPU1Q9dGNwOi8vMTI3LjAuMC4xOjIzNzUKICAgIGNvbW1hbmRzOgogICAgICAtIGRvY2tlciBsb2dpbiAtdT0idWtob21lb2ZmaWNlZGlnaXRhbCtkcm9uZV9kZW1vIiAtcD0ke0RPQ0tFUl9QQVNTV09SRH0gcXVheS5pbwogICAgICAtIGRvY2tlciB0YWcgbm9kZS1oZWxsby13b3JsZCBxdWF5LmlvL3VraG9tZW9mZmljZWRpZ2l0YWwvbm9kZS1oZWxsby13b3JsZDoke0RST05FX0NPTU1JVF9TSEF9CiAgICAgIC0gZG9ja2VyIHB1c2ggcXVheS5pby91a2hvbWVvZmZpY2VkaWdpdGFsL25vZGUtaGVsbG8td29ybGQ6JHtEUk9ORV9DT01NSVRfU0hBfQogICAgd2hlbjoKICAgICAgYnJhbmNoOiBtYXN0ZXIKICAgICAgZXZlbnQ6IHB1c2gKCiMgICBpbWFnZV90b19hcnRpZmFjdG9yeToKIyAgICAgaW1hZ2U6IGRvY2tlcjoxLjExCiMgICAgIGVudmlyb25tZW50OgojICAgICAgIC0gRE9DS0VSX0hPU1Q9dGNwOi8vMTI3LjAuMC4xOjIzNzUKIyAgICAgY29tbWFuZHM6CiMgICAgICAgLSBkb2NrZXIgbG9naW4gLXU9InJlZ3QtYnVpbGQtYm90IiAtcD0ke0RPQ0tFUl9BUlRJRkFDVE9SWV9QQVNTV09SRH0gZG9ja2VyLmRpZ2l0YWwuaG9tZW9mZmljZS5nb3YudWsKIyAgICAgICAtIGRvY2tlciB0YWcgbm9kZS1oZWxsby13b3JsZCBkb2NrZXIuZGlnaXRhbC5ob21lb2ZmaWNlLmdvdi51ay91a2hvbWVvZmZpY2VkaWdpdGFsL25vZGUtaGVsbG8td29ybGQ6JHtEUk9ORV9DT01NSVRfU0hBfQojICAgICAgIC0gZG9ja2VyIHB1c2ggZG9ja2VyLmRpZ2l0YWwuaG9tZW9mZmljZS5nb3YudWsvdWtob21lb2ZmaWNlZGlnaXRhbC9ub2RlLWhlbGxvLXdvcmxkOiR7RFJPTkVfQ09NTUlUX1NIQX0KIyAgICAgd2hlbjoKIyAgICAgICBicmFuY2g6IG1hc3RlcgojICAgICAgIGV2ZW50OiBwdXNoCgogIHByLWJ1aWxkZXI6CiAgICBwcml2aWxlZ2VkOiB0cnVlCiAgICBpbWFnZTogZG9ja2VyOjEuMTEKICAgIGVudmlyb25tZW50OgogICAgICAtIERPQ0tFUl9IT1NUPXRjcDovLzEyNy4wLjAuMToyMzc1CiAgICBjb21tYW5kczoKICAgICAgLSBkb2NrZXIgYnVpbGQgLXQgbm9kZS1oZWxsby13b3JsZCAuCiAgICB3aGVuOgogICAgICBldmVudDogcHVsbF9yZXF1ZXN0CgogIGRlcGxveS10by1wcm9kOgogICAgaW1hZ2U6IGJ1c3lib3gKICAgIGNvbW1hbmRzOgogICAgICAtIC9iaW4vZWNobyBoZWxsbyBwcm9kCiAgICB3aGVuOgogICAgICBlbnZpcm9ubWVudDogZGV2LWluZHVjdGlvbgogICAgICBldmVudDogZGVwbG95bWVudAoKICBkZXBsb3k6CiAgICBpbWFnZTogYnVzeWJveAogICAgY29tbWFuZHM6CiAgICAgIC0gL2Jpbi9lY2hvIGhlbGxvICR7RU5WX05BTUV9CiAgICB3aGVuOgogICAgICBlbnZpcm9ubWVudDogdWF0CiAgICAgIGV2ZW50OiBkZXBsb3ltZW50CgogIGZpcnN0LXN0ZXA6CiAgICBpbWFnZTogYnVzeWJveAogICAgY29tbWFuZHM6CiAgICAgIC0gZWNobyBoZWxsbyA-IHRlc3QudHh0CiAgICB3aGVuOgogICAgICBicmFuY2g6IG1hc3RlcgogICAgICBldmVudDogcHVzaAoKICBzZWNvbmQtc3RlcDoKICAgIGltYWdlOiBidXN5Ym94CiAgICBjb21tYW5kczoKICAgICAgLSBjYXQgdGVzdC50eHQKICAgIHdoZW46CiAgICAgIGJyYW5jaDogbWFzdGVyCiAgICAgIGV2ZW50OiBwdXNoCgogIHRoaXJkLXN0ZXA6CiAgICBpbWFnZTogcXVheS5pby91a2hvbWVvZmZpY2VkaWdpdGFsL2tkOnYwLjIuMgogICAgY29tbWFuZHM6CiAgICAgIC0gZW52CiAgICB3aGVuOgogICAgICBicmFuY2g6IG1hc3RlcgogICAgICBldmVudDogcHVzaAoKICBwcmVkZXBsb3lfdG9fY2k6CiAgICBpbWFnZTogcGx1Z2lucy9naXQKICAgIGNvbW1hbmRzOgogICAgICAtIGdpdCBjbG9uZSBodHRwczovL2dpdGh1Yi5jb20vVUtIb21lT2ZmaWNlL2t1YmUtbm9kZS1oZWxsby13b3JsZC5naXQKICAgIHdoZW46CiAgICAgIGJyYW5jaDogbWFzdGVyCiAgICAgIGV2ZW50OiBwdXNoCgogIGRlcGxveV90b19jaToKICAgIGltYWdlOiBxdWF5LmlvL3VraG9tZW9mZmljZWRpZ2l0YWwva2Q6djAuMi4yCiAgICBlbnZpcm9ubWVudDoKICAgIGNvbW1hbmRzOgogICAgICAtIGt1YmVjdGwgY3JlYXRlIG5hbWVzcGFjZSAke0RST05FX0NPTU1JVF9TSEF9IC0tc2VydmVyPSR7S1VCRV9TRVJWRVJfQ0l9IC0taW5zZWN1cmUtc2tpcC10bHMtdmVyaWZ5PXRydWUgLS10b2tlbj0ke0tVQkVfVE9LRU5fREVWfQogICAgICAtIGNkIGt1YmUtbm9kZS1oZWxsby13b3JsZAogICAgICAtIEtVQkVfTkFNRVNQQUNFPSR7RFJPTkVfQ09NTUlUX1NIQX0gS1VCRV9TRVJWRVI9JHtLVUJFX1NFUlZFUl9DSX0gLi9kZXBsb3kuc2gKICAgICAgLSBrdWJlY3RsIGRlbGV0ZSBuYW1lc3BhY2UgJHtEUk9ORV9DT01NSVRfU0hBfSAtLXNlcnZlcj0ke0tVQkVfU0VSVkVSX0NJfSAtLWluc2VjdXJlLXNraXAtdGxzLXZlcmlmeT10cnVlIC0tdG9rZW49JHtLVUJFX1RPS0VOX0RFVn0KICAgIHdoZW46CiAgICAgIGJyYW5jaDogbWFzdGVyCiAgICAgIGV2ZW50OiBwdXNoCgogIHByZWRlcGxveV90b191YXQ6CiAgICBpbWFnZTogcGx1Z2lucy9naXQKICAgIGNvbW1hbmRzOgogICAgICAtIGdpdCBjbG9uZSBodHRwczovLyR7R0lUSFVCX1RPS0VOfTp4LW9hdXRoLWJhc2ljQGdpdGh1Yi5jb20vVUtIb21lT2ZmaWNlL2t1YmUtbm9kZS1oZWxsby13b3JsZC5naXQKICAgIHdoZW46CiAgICAgIGVudmlyb25tZW50OiBkZXYtaW5kdWN0aW9uCiAgICAgIGV2ZW50OiBkZXBsb3ltZW50CgogIGRlcGxveV90b191YXQ6CiAgICBpbWFnZTogcXVheS5pby91a2hvbWVvZmZpY2VkaWdpdGFsL2tkOnYwLjIuMgogICAgZW52aXJvbm1lbnQ6CiAgICAgIC0gS1VCRV9OQU1FU1BBQ0U9ZGV2LWluZHVjdGlvbgogICAgY29tbWFuZHM6CiAgICAgIC0gY2Qga3ViZS1ub2RlLWhlbGxvLXdvcmxkCiAgICAgIC0gLi9kZXBsb3kuc2gKICAgIHdoZW46CiAgICAgIGVudmlyb25tZW50OiBkZXYtaW5kdWN0aW9uCiAgICAgIGV2ZW50OiBkZXBsb3ltZW50CgoKCiAgbXktZG9ja2VyLWNvbXBvc2U6CiAgICBwcml2aWxlZ2VkOiB0cnVlCiAgICBpbWFnZTogZG9ja2VyL2NvbXBvc2U6MS44LjEKICAgIGVudmlyb25tZW50OgogICAgICAtIERPQ0tFUl9IT1NUPXRjcDovLzEyNy4wLjAuMToyMzc1CiAgICBjb21tYW5kczoKICAgICAgLSBkb2NrZXItY29tcG9zZSBidWlsZAogICAgd2hlbjoKICAgICAgZW52aXJvbm1lbnQ6IGNvbXBvc2UKICAgICAgZXZlbnQ6IGRlcGxveW1lbnQKCiAgaW50ZWdyYXRpb25fdGVzdHM6CiAgICBpbWFnZTogZG9ja2VyL2NvbXBvc2U6MS44LjEKICAgIGVudmlyb25tZW50OgogICAgICAtIERPQ0tFUl9IT1NUPXRjcDovLzEyNy4wLjAuMToyMzc1CiAgICBjb21tYW5kczoKICAgICAgLSBkb2NrZXItY29tcG9zZSB1cCAtZAogICAgICAtIHNsZWVwIDEwCiAgICAgIC0gZG9ja2VyLWNvbXBvc2UgZXhlYyAtVCB3ZWIgbnBtIHJ1biBjaQogICAgICAtIGRvY2tlci1jb21wb3NlIHN0b3AKICAgIHdoZW46CiAgICAgIGVudmlyb25tZW50OiBjb21wb3NlCiAgICAgIGV2ZW50OiBkZXBsb3ltZW50CgogIGltYWdlX3RvX3F1YXk6CiAgICBpbWFnZTogZG9ja2VyOjEuMTEKICAgIGVudmlyb25tZW50OgogICAgICAtIERPQ0tFUl9IT1NUPXRjcDovLzEyNy4wLjAuMToyMzc1CiAgICBjb21tYW5kczoKICAgICAgLSBkb2NrZXIgbG9naW4gLXU9InVraG9tZW9mZmljZWRpZ2l0YWwrZHJvbmVfZGVtbyIgLXA9JHtET0NLRVJfUEFTU1dPUkR9IHF1YXkuaW8KICAgICAgLSBkb2NrZXIgdGFnIG5vZGUtaGVsbG8td29ybGQgcXVheS5pby91a2hvbWVvZmZpY2VkaWdpdGFsL25vZGUtaGVsbG8td29ybGQ6JHtEUk9ORV9DT01NSVRfU0hBfQogICAgICAtIGRvY2tlciBwdXNoIHF1YXkuaW8vdWtob21lb2ZmaWNlZGlnaXRhbC9ub2RlLWhlbGxvLXdvcmxkOiR7RFJPTkVfQ09NTUlUX1NIQX0KICAgIHdoZW46CiAgICAgIGVudmlyb25tZW50OiBjb21wb3NlCiAgICAgIGV2ZW50OiBkZXBsb3ltZW50CgoKICBrdWJlcm5ldGVzOgogICAgaW1hZ2U6IGRvY2tlcjoxLjExCiAgICBwcml2aWxlZ2VkOiB0cnVlCiAgICBlbnZpcm9ubWVudDoKICAgICAgLSBET0NLRVJfSE9TVD10Y3A6Ly8xMjcuMC4wLjE6MjM3NQogICAgY29tbWFuZHM6CiAgICAgICMgLSBta2RpciAtcCAvdmFyL2xpYi9rdWJlbGV0CiAgICAgICMgLSB3Z2V0IGh0dHBzOi8vZ2l0aHViLmNvbS9rdWJlcm5ldGVzL2t1YmVybmV0ZXMvcmVsZWFzZXMvZG93bmxvYWQvdjEuNC42L2t1YmVybmV0ZXMudGFyLmd6CiAgICAgICMgLSB0YXIgLXh2ZiBrdWJlcm5ldGVzLnRhci5negogICAgICAjIC0gdGFyIC14dmYga3ViZXJuZXRlcy9zZXJ2ZXIva3ViZXJuZXRlcy1zZXJ2ZXItbGludXgtYW1kNjQudGFyLmd6CiAgICAgICMgLSBjcCBrdWJlcm5ldGVzL3NlcnZlci9iaW4va3ViZWxldCAvdmFyL2xpYi9rdWJlbGV0LwogICAgICAtIG1rZGlyIC1wIC92YXIvbGliL2t1YmVsZXQKICAgICAgLSBtb3VudCAtLWJpbmQgL3Zhci9saWIva3ViZWxldCAvdmFyL2xpYi9rdWJlbGV0CiAgICAgIC0gbW91bnQgLS1tYWtlLXNoYXJlZCAvdmFyL2xpYi9rdWJlbGV0CiAgICAgIC0gbW91bnQgLS1tYWtlLXJzaGFyZWQgL3Zhci9saWIva3ViZWxldAogICAgICAtIGRvY2tlciBydW4gLWQgLS12b2x1bWU9L3N5czovc3lzOnJ3IC0tdm9sdW1lPS92YXIvbGliL2RvY2tlci86L3Zhci9saWIvZG9ja2VyOnJ3IC0tdm9sdW1lPS92YXIvbGliL2t1YmVsZXQvOi92YXIvbGliL2t1YmVsZXQ6cncsc2hhcmVkIC0tdm9sdW1lPS92YXIvcnVuOi92YXIvcnVuOnJ3IC0tbmV0PWhvc3QgLS1waWQ9aG9zdCAtLXByaXZpbGVnZWQgLS1uYW1lPWt1YmVsZXQgZ2NyLmlvL2dvb2dsZV9jb250YWluZXJzL2h5cGVya3ViZS1hbWQ2NDp2MS40LjYgL2h5cGVya3ViZSBrdWJlbGV0IC0taG9zdG5hbWUtb3ZlcnJpZGU9MTI3LjAuMC4xIC0tYXBpLXNlcnZlcnM9aHR0cDovL2xvY2FsaG9zdDo4MDgwIC0tY29uZmlnPS9ldGMva3ViZXJuZXRlcy9tYW5pZmVzdHMgLS1jbHVzdGVyLWRucz0xMC4wLjAuMTAgLS1jbHVzdGVyLWRvbWFpbj1jbHVzdGVyLmxvY2FsIC0tYWxsb3ctcHJpdmlsZWdlZCAtLXY9MgogICAgd2hlbjoKICAgICAgZW52aXJvbm1lbnQ6IGt1YmVybmV0ZXMKICAgICAgZXZlbnQ6IGRlcGxveW1lbnQKCnNlcnZpY2VzOgogIGRpbmQ6CiAgICBpbWFnZTogZG9ja2VyOjEuMTEtZGluZAogICAgcHJpdmlsZWdlZDogdHJ1ZQogICAgY29tbWFuZDoKICAgICAgLSAiLXMiCiAgICAgIC0gIm92ZXJsYXkiCgo.zGSGXa1S_6NOaj78jx3G2fPbja3jOZmxhGmmcx66aYc