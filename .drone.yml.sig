eyJhbGciOiJIUzI1NiJ9.cGlwZWxpbmU6CgogIG15LWJ1aWxkOgogICAgcHJpdmlsZWdlZDogdHJ1ZQogICAgaW1hZ2U6IGRvY2tlcjoxLjExCiAgICBlbnZpcm9ubWVudDoKICAgICAgLSBET0NLRVJfSE9TVD10Y3A6Ly8xMjcuMC4wLjE6MjM3NQogICAgY29tbWFuZHM6CiAgICAgIC0gZG9ja2VyIGJ1aWxkIC10IG5vZGUtaGVsbG8td29ybGQgLgogICAgd2hlbjoKICAgICAgYnJhbmNoOiBtYXN0ZXIKICAgICAgZXZlbnQ6IHB1c2gKCiMgICBpbWFnZV90b19xdWF5OgojICAgICBpbWFnZTogZG9ja2VyOjEuMTEKIyAgICAgZW52aXJvbm1lbnQ6CiMgICAgICAgLSBET0NLRVJfSE9TVD10Y3A6Ly8xMjcuMC4wLjE6MjM3NQojICAgICBjb21tYW5kczoKIyAgICAgICAtIGRvY2tlciBsb2dpbiAtdT0idWtob21lb2ZmaWNlZGlnaXRhbCtkcm9uZV9kZW1vIiAtcD0ke0RPQ0tFUl9QQVNTV09SRH0gcXVheS5pbwojICAgICAgIC0gZG9ja2VyIHRhZyBub2RlLWhlbGxvLXdvcmxkIHF1YXkuaW8vdWtob21lb2ZmaWNlZGlnaXRhbC9ub2RlLWhlbGxvLXdvcmxkOiR7RFJPTkVfQ09NTUlUX1NIQX0KIyAgICAgICAtIGRvY2tlciBwdXNoIHF1YXkuaW8vdWtob21lb2ZmaWNlZGlnaXRhbC9ub2RlLWhlbGxvLXdvcmxkOiR7RFJPTkVfQ09NTUlUX1NIQX0KIyAgICAgd2hlbjoKIyAgICAgICBicmFuY2g6IG1hc3RlcgojICAgICAgIGV2ZW50OiBwdXNoCgojICAgaW1hZ2VfdG9fYXJ0aWZhY3Rvcnk6CiMgICAgIGltYWdlOiBkb2NrZXI6MS4xMQojICAgICBlbnZpcm9ubWVudDoKIyAgICAgICAtIERPQ0tFUl9IT1NUPXRjcDovLzEyNy4wLjAuMToyMzc1CiMgICAgIGNvbW1hbmRzOgojICAgICAgIC0gZG9ja2VyIGxvZ2luIC11PSJyZWd0LWJ1aWxkLWJvdCIgLXA9JHtET0NLRVJfQVJUSUZBQ1RPUllfUEFTU1dPUkR9IGRvY2tlci5kaWdpdGFsLmhvbWVvZmZpY2UuZ292LnVrCiMgICAgICAgLSBkb2NrZXIgdGFnIG5vZGUtaGVsbG8td29ybGQgZG9ja2VyLmRpZ2l0YWwuaG9tZW9mZmljZS5nb3YudWsvdWtob21lb2ZmaWNlZGlnaXRhbC9ub2RlLWhlbGxvLXdvcmxkOiR7RFJPTkVfQ09NTUlUX1NIQX0KIyAgICAgICAtIGRvY2tlciBwdXNoIGRvY2tlci5kaWdpdGFsLmhvbWVvZmZpY2UuZ292LnVrL3VraG9tZW9mZmljZWRpZ2l0YWwvbm9kZS1oZWxsby13b3JsZDoke0RST05FX0NPTU1JVF9TSEF9CiMgICAgIHdoZW46CiMgICAgICAgYnJhbmNoOiBtYXN0ZXIKIyAgICAgICBldmVudDogcHVzaAoKICBwci1idWlsZGVyOgogICAgcHJpdmlsZWdlZDogdHJ1ZQogICAgaW1hZ2U6IGRvY2tlcjoxLjExCiAgICBlbnZpcm9ubWVudDoKICAgICAgLSBET0NLRVJfSE9TVD10Y3A6Ly8xMjcuMC4wLjE6MjM3NQogICAgY29tbWFuZHM6CiAgICAgIC0gZG9ja2VyIGJ1aWxkIC10IG5vZGUtaGVsbG8td29ybGQgLgogICAgd2hlbjoKICAgICAgZXZlbnQ6IHB1bGxfcmVxdWVzdAoKICBkZXBsb3ktdG8tcHJvZDoKICAgIGltYWdlOiBidXN5Ym94CiAgICBjb21tYW5kczoKICAgICAgLSAvYmluL2VjaG8gaGVsbG8gcHJvZAogICAgd2hlbjoKICAgICAgZW52aXJvbm1lbnQ6IHByb2R1Y3Rpb24KICAgICAgZXZlbnQ6IGRlcGxveW1lbnQKCiAgZGVwbG95OgogICAgaW1hZ2U6IGJ1c3lib3gKICAgIGNvbW1hbmRzOgogICAgICAtIC9iaW4vZWNobyBoZWxsbyAke0VOVl9OQU1FfQogICAgd2hlbjoKICAgICAgZW52aXJvbm1lbnQ6IHVhdAogICAgICBldmVudDogZGVwbG95bWVudAoKICBmaXJzdC1zdGVwOgogICAgaW1hZ2U6IGJ1c3lib3gKICAgIGNvbW1hbmRzOgogICAgICAtIGVjaG8gaGVsbG8gPiB0ZXN0LnR4dAogICAgd2hlbjoKICAgICAgYnJhbmNoOiBtYXN0ZXIKICAgICAgZXZlbnQ6IHB1c2gKCiAgc2Vjb25kLXN0ZXA6CiAgICBpbWFnZTogYnVzeWJveAogICAgY29tbWFuZHM6CiAgICAgIC0gY2F0IHRlc3QudHh0CiAgICB3aGVuOgogICAgICBicmFuY2g6IG1hc3RlcgogICAgICBldmVudDogcHVzaAoKICBkZXBsb3lfdG9fZGV2OgogICAgaW1hZ2U6IHF1YXkuaW8vdWtob21lb2ZmaWNlZGlnaXRhbC9rZDpsYXRlc3QKICAgIGVudmlyb25tZW50czoKICAgICAgLSAiS1VCRV9OQU1FU1BBQ0U9JHtLVUJFX05BTUVTUEFDRTotc29tZW5hbWVzcGFjZX0iCiAgICAgIC0gIktVQkVfU0VSVkVSPSR7S1VCRV9TRVJWRVJfREVWfSIKICAgICAgLSAiS1VCRV9UT0tFTj0ke0tVQkVfVE9LRU5fREVWfSIKICAgIGNvbW1hbmRzOgogICAgICAtIGdpdCBjbG9uZSBodHRwczovL2dpdGh1Yi5jb20vVUtIb21lT2ZmaWNlL2t1YmUtbm9kZS1oZWxsby13b3JsZC5naXQKICAgICAgLSBscyAtbGEKICAgICAgLSBwd2QKICAgICAgIyAtIGtkIC0taW5zZWN1cmUtc2tpcC10bHMtdmVyaWZ5IC0tZmlsZSAuL2t1YmUtbm9kZS1oZWxsby13b3JsZC9rdWJlL2V4YW1wbGUtZGVwbG95bWVudC55YW1sIC0tZmlsZSAuL2t1YmUtbm9kZS1oZWxsby13b3JsZC9rdWJlL2V4YW1wbGUtc2VydmljZS55YW1sIC0tZmlsZSAuL2t1YmUtbm9kZS1oZWxsby13b3JsZC9rdWJlL2V4YW1wbGUtaW5ncmVzcy55YW1sCiAgICB3aGVuOgogICAgICBicmFuY2g6IG1hc3RlcgogICAgICBldmVudDogcHVzaAoKc2VydmljZXM6CiAgZGluZDoKICAgIGltYWdlOiBkb2NrZXI6MS4xMS1kaW5kCiAgICBwcml2aWxlZ2VkOiB0cnVlCiAgICBjb21tYW5kOgogICAgICAtICItcyIKICAgICAgLSAib3ZlcmxheSIKCg.cRC-fvNvP7XZjPrPrSE3Y9JJKyQITs34cYeJiiS19aw