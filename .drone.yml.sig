eyJhbGciOiJIUzI1NiJ9.cGlwZWxpbmU6CgogIG15LWJ1aWxkOgogICAgcHJpdmlsZWdlZDogdHJ1ZQogICAgaW1hZ2U6IGRvY2tlcjoxLjExCiAgICBlbnZpcm9ubWVudDoKICAgICAgLSBET0NLRVJfSE9TVD10Y3A6Ly8xMjcuMC4wLjE6MjM3NQogICAgY29tbWFuZHM6CiAgICAgIC0gZG9ja2VyIGJ1aWxkIC10IG5vZGUtaGVsbG8td29ybGQgLgogICAgd2hlbjoKICAgICAgYnJhbmNoOiBtYXN0ZXIKICAgICAgZXZlbnQ6IHB1c2gKCiAgaW1hZ2VfdG9fcXVheToKICAgIGltYWdlOiBkb2NrZXI6MS4xMQogICAgZW52aXJvbm1lbnQ6CiAgICAgIC0gRE9DS0VSX0hPU1Q9dGNwOi8vMTI3LjAuMC4xOjIzNzUKICAgIGNvbW1hbmRzOgogICAgICAtIGRvY2tlciBsb2dpbiAtdT0idWtob21lb2ZmaWNlZGlnaXRhbCtkcm9uZV9kZW1vIiAtcD0ke0RPQ0tFUl9QQVNTV09SRH0gcXVheS5pbwogICAgICAtIGRvY2tlciB0YWcgbm9kZS1oZWxsby13b3JsZCBxdWF5LmlvL3VraG9tZW9mZmljZWRpZ2l0YWwvbm9kZS1oZWxsby13b3JsZDoke0RST05FX0NPTU1JVF9TSEF9CiAgICAgIC0gZG9ja2VyIHB1c2ggcXVheS5pby91a2hvbWVvZmZpY2VkaWdpdGFsL25vZGUtaGVsbG8td29ybGQ6JHtEUk9ORV9DT01NSVRfU0hBfQogICAgd2hlbjoKICAgICAgYnJhbmNoOiBtYXN0ZXIKICAgICAgZXZlbnQ6IHB1c2gKCiMgICBpbWFnZV90b19hcnRpZmFjdG9yeToKIyAgICAgaW1hZ2U6IGRvY2tlcjoxLjExCiMgICAgIGVudmlyb25tZW50OgojICAgICAgIC0gRE9DS0VSX0hPU1Q9dGNwOi8vMTI3LjAuMC4xOjIzNzUKIyAgICAgY29tbWFuZHM6CiMgICAgICAgLSBkb2NrZXIgbG9naW4gLXU9InJlZ3QtYnVpbGQtYm90IiAtcD0ke0RPQ0tFUl9BUlRJRkFDVE9SWV9QQVNTV09SRH0gZG9ja2VyLmRpZ2l0YWwuaG9tZW9mZmljZS5nb3YudWsKIyAgICAgICAtIGRvY2tlciB0YWcgbm9kZS1oZWxsby13b3JsZCBkb2NrZXIuZGlnaXRhbC5ob21lb2ZmaWNlLmdvdi51ay91a2hvbWVvZmZpY2VkaWdpdGFsL25vZGUtaGVsbG8td29ybGQ6JHtEUk9ORV9DT01NSVRfU0hBfQojICAgICAgIC0gZG9ja2VyIHB1c2ggZG9ja2VyLmRpZ2l0YWwuaG9tZW9mZmljZS5nb3YudWsvdWtob21lb2ZmaWNlZGlnaXRhbC9ub2RlLWhlbGxvLXdvcmxkOiR7RFJPTkVfQ09NTUlUX1NIQX0KIyAgICAgd2hlbjoKIyAgICAgICBicmFuY2g6IG1hc3RlcgojICAgICAgIGV2ZW50OiBwdXNoCgogIHByLWJ1aWxkZXI6CiAgICBwcml2aWxlZ2VkOiB0cnVlCiAgICBpbWFnZTogZG9ja2VyOjEuMTEKICAgIGVudmlyb25tZW50OgogICAgICAtIERPQ0tFUl9IT1NUPXRjcDovLzEyNy4wLjAuMToyMzc1CiAgICBjb21tYW5kczoKICAgICAgLSBkb2NrZXIgYnVpbGQgLXQgbm9kZS1oZWxsby13b3JsZCAuCiAgICB3aGVuOgogICAgICBldmVudDogcHVsbF9yZXF1ZXN0CgogIGRlcGxveS10by1wcm9kOgogICAgaW1hZ2U6IGJ1c3lib3gKICAgIGNvbW1hbmRzOgogICAgICAtIC9iaW4vZWNobyBoZWxsbyBwcm9kCiAgICB3aGVuOgogICAgICBlbnZpcm9ubWVudDogZGV2LWluZHVjdGlvbgogICAgICBldmVudDogZGVwbG95bWVudAoKICBkZXBsb3k6CiAgICBpbWFnZTogYnVzeWJveAogICAgY29tbWFuZHM6CiAgICAgIC0gL2Jpbi9lY2hvIGhlbGxvICR7RU5WX05BTUV9CiAgICB3aGVuOgogICAgICBlbnZpcm9ubWVudDogdWF0CiAgICAgIGV2ZW50OiBkZXBsb3ltZW50CgogIGZpcnN0LXN0ZXA6CiAgICBpbWFnZTogYnVzeWJveAogICAgY29tbWFuZHM6CiAgICAgIC0gZWNobyBoZWxsbyA-IHRlc3QudHh0CiAgICB3aGVuOgogICAgICBicmFuY2g6IG1hc3RlcgogICAgICBldmVudDogcHVzaAoKICBzZWNvbmQtc3RlcDoKICAgIGltYWdlOiBidXN5Ym94CiAgICBjb21tYW5kczoKICAgICAgLSBjYXQgdGVzdC50eHQKICAgIHdoZW46CiAgICAgIGJyYW5jaDogbWFzdGVyCiAgICAgIGV2ZW50OiBwdXNoCgogIHRoaXJkLXN0ZXA6CiAgICBpbWFnZTogcXVheS5pby91a2hvbWVvZmZpY2VkaWdpdGFsL2tkOnYwLjIuMgogICAgY29tbWFuZHM6CiAgICAgIC0gZW52CiAgICB3aGVuOgogICAgICBicmFuY2g6IG1hc3RlcgogICAgICBldmVudDogcHVzaAoKICBwcmVkZXBsb3lfdG9fdWF0OgogICAgaW1hZ2U6IHBsdWdpbnMvZ2l0CiAgICBjb21tYW5kczoKICAgICAgLSBnaXQgY2xvbmUgaHR0cHM6Ly8ke0dJVEhVQl9UT0tFTn06eC1vYXV0aC1iYXNpY0BnaXRodWIuY29tL1VLSG9tZU9mZmljZS9rdWJlLW5vZGUtaGVsbG8td29ybGQuZ2l0CiAgICB3aGVuOgogICAgICBlbnZpcm9ubWVudDogZGV2LWluZHVjdGlvbgogICAgICBldmVudDogZGVwbG95bWVudAoKICBkZXBsb3lfdG9fdWF0OgogICAgaW1hZ2U6IHF1YXkuaW8vdWtob21lb2ZmaWNlZGlnaXRhbC9rZDp2MC4yLjIKICAgIGVudmlyb25tZW50OgogICAgICAtIEtVQkVfTkFNRVNQQUNFPWRldi1pbmR1Y3Rpb24KICAgIGNvbW1hbmRzOgogICAgICAtIGNkIGt1YmUtbm9kZS1oZWxsby13b3JsZAogICAgICAtIC4vZGVwbG95LnNoCiAgICB3aGVuOgogICAgICBlbnZpcm9ubWVudDogZGV2LWluZHVjdGlvbgogICAgICBldmVudDogZGVwbG95bWVudAoKCgogIG15LWRvY2tlci1jb21wb3NlOgogICAgcHJpdmlsZWdlZDogdHJ1ZQogICAgaW1hZ2U6IGRvY2tlci9jb21wb3NlOjEuOC4xCiAgICBlbnZpcm9ubWVudDoKICAgICAgLSBET0NLRVJfSE9TVD10Y3A6Ly8xMjcuMC4wLjE6MjM3NQogICAgY29tbWFuZHM6CiAgICAgIC0gZG9ja2VyLWNvbXBvc2UgYnVpbGQKICAgIHdoZW46CiAgICAgIGVudmlyb25tZW50OiBjb21wb3NlCiAgICAgIGV2ZW50OiBkZXBsb3ltZW50CgogIGludGVncmF0aW9uX3Rlc3RzOgogICAgaW1hZ2U6IGRvY2tlci9jb21wb3NlOjEuOC4xCiAgICBlbnZpcm9ubWVudDoKICAgICAgLSBET0NLRVJfSE9TVD10Y3A6Ly8xMjcuMC4wLjE6MjM3NQogICAgY29tbWFuZHM6CiAgICAgIC0gZG9ja2VyLWNvbXBvc2UgdXAgLWQKICAgICAgLSBzbGVlcCAxMAogICAgICAtIGRvY2tlci1jb21wb3NlIGV4ZWMgLVQgd2ViIG5wbSBydW4gY2kKICAgICAgLSBkb2NrZXItY29tcG9zZSBzdG9wCiAgICB3aGVuOgogICAgICBlbnZpcm9ubWVudDogY29tcG9zZQogICAgICBldmVudDogZGVwbG95bWVudAoKICBpbWFnZV90b19xdWF5OgogICAgaW1hZ2U6IGRvY2tlcjoxLjExCiAgICBlbnZpcm9ubWVudDoKICAgICAgLSBET0NLRVJfSE9TVD10Y3A6Ly8xMjcuMC4wLjE6MjM3NQogICAgY29tbWFuZHM6CiAgICAgIC0gZG9ja2VyIGxvZ2luIC11PSJ1a2hvbWVvZmZpY2VkaWdpdGFsK2Ryb25lX2RlbW8iIC1wPSR7RE9DS0VSX1BBU1NXT1JEfSBxdWF5LmlvCiAgICAgIC0gZG9ja2VyIHRhZyBub2RlLWhlbGxvLXdvcmxkIHF1YXkuaW8vdWtob21lb2ZmaWNlZGlnaXRhbC9ub2RlLWhlbGxvLXdvcmxkOiR7RFJPTkVfQ09NTUlUX1NIQX0KICAgICAgLSBkb2NrZXIgcHVzaCBxdWF5LmlvL3VraG9tZW9mZmljZWRpZ2l0YWwvbm9kZS1oZWxsby13b3JsZDoke0RST05FX0NPTU1JVF9TSEF9CiAgICB3aGVuOgogICAgICBlbnZpcm9ubWVudDogY29tcG9zZQogICAgICBldmVudDogZGVwbG95bWVudAoKCiAga3ViZXJuZXRlczoKICAgIGltYWdlOiBkb2NrZXI6MS4xMQogICAgcHJpdmlsZWdlZDogdHJ1ZQogICAgY29tbWFuZHM6CiAgICAgIC0gZG9ja2VyIHJ1biAtZCAtLXZvbHVtZT0vc3lzOi9zeXM6cncgLS12b2x1bWU9L3Zhci9saWIvZG9ja2VyLzovdmFyL2xpYi9kb2NrZXI6cncgLS12b2x1bWU9L3Zhci9saWIva3ViZWxldC86L3Zhci9saWIva3ViZWxldDpydyxzaGFyZWQgLS12b2x1bWU9L3Zhci9ydW46L3Zhci9ydW46cncgLS1uZXQ9aG9zdCAtLXBpZD1ob3N0IC0tcHJpdmlsZWdlZCAtLW5hbWU9a3ViZWxldCBnY3IuaW8vZ29vZ2xlX2NvbnRhaW5lcnMvaHlwZXJrdWJlLSR7QVJDSH06JHtLOFNfVkVSU0lPTn0gL2h5cGVya3ViZSBrdWJlbGV0IC0taG9zdG5hbWUtb3ZlcnJpZGU9MTI3LjAuMC4xIC0tYXBpLXNlcnZlcnM9aHR0cDovL2xvY2FsaG9zdDo4MDgwIC0tY29uZmlnPS9ldGMva3ViZXJuZXRlcy9tYW5pZmVzdHMgLS1jbHVzdGVyLWRucz0xMC4wLjAuMTAgLS1jbHVzdGVyLWRvbWFpbj1jbHVzdGVyLmxvY2FsIC0tYWxsb3ctcHJpdmlsZWdlZCAtLXY9MgogICAgd2hlbjoKICAgICAgZW52aXJvbm1lbnQ6IGt1YmVybmV0ZXMKICAgICAgZXZlbnQ6IGRlcGxveW1lbnQKCnNlcnZpY2VzOgogIGRpbmQ6CiAgICBpbWFnZTogZG9ja2VyOjEuMTEtZGluZAogICAgcHJpdmlsZWdlZDogdHJ1ZQogICAgY29tbWFuZDoKICAgICAgLSAiLXMiCiAgICAgIC0gIm92ZXJsYXkiCgo.aAql4L6IryCScvhKIObyi7xr6ZShqKXob07uRw4NK-4